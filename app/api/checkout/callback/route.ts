import { PaymentCallbackData } from "@/@types/payment-callback";
import { prisma } from "@/prisma/prisma-client";
import { OrderSuccessTemplate } from "@/shared/components/shared/email-templates/order-success";
import { useCart } from "@/shared/hooks";
import { sendEmail } from "@/shared/lib";
import { calculatePrices } from "@/shared/lib/calculate-prices";
import { CartItemDTO } from "@/shared/services/dto/cart.dto";
import { OrderStatus } from "@prisma/client";
import { NextRequest, NextResponse } from "next/server";


// export async function POST(req: NextRequest) {
//   try {
//   //  console.log('Received request');
//     const body = (await req.json()) as PaymentCallbackData;

//   //  console.log('Parsed body:', body);

//     if (!body || !body.object || !body.object.metadata?.order_id) {
//       return NextResponse.json({ error: 'Invalid request body' }, { status: 400 });
//     }

//     const order = await prisma.order.findFirst({
//       where: {
//         id: Number(body.object.metadata.order_id),
//       },
//     });

//   //  console.log('Fetched order:', order);

//     if (!order) {
//       return NextResponse.json({ error: 'Order not found' }, { status: 404 });
//     }

//     const isSucceeded = body?.object?.status === 'succeeded';

//     await prisma.order.update({
//       where: {
//         id: order.id,
//       },
//       data: {
//         status: isSucceeded ? OrderStatus.SUCCEEDED : OrderStatus.CANCELLED,
//       },
//     });

//  //   console.log('Order status updated');

//     const items = JSON.parse(order?.items as string) as CartItemDTO[];
    
//   //  console.log('Parsed items:', items);

//     if (isSucceeded) {
//       try {
//         await sendEmail(
//           order.email,
//           `Next Pizza | –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω!`,
//           OrderSuccessTemplate({ orderId: order.id, items })
//         );
//     //    console.log('Email sent');
//       } catch (emailError) {
//         console.error('Error sending email:', emailError);
//       }
//     }

//     return NextResponse.json({ message: 'Payment processed successfully' });

//   } catch (error) {
//     console.error('[checkout/callback] error', error);
//     return NextResponse.json({ error: 'Server error' }, { status: 500 });
//   }
// }

export async function POST(req: NextRequest) {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å');
    const body = (await req.json()) as PaymentCallbackData;

    console.log('–†–∞–∑–æ–±—Ä–∞–Ω–Ω–æ–µ —Ç–µ–ª–æ:', body);

    if (!body || !body.object || !body.object.metadata?.order_id) {
      return NextResponse.json({ error: 'Invalid request body' }, { status: 400 });
    }

    const order = await prisma.order.findFirst({
      where: {
        id: Number(body.object.metadata.order_id),
      },
    });

    console.log('Body status:', body.object.status);
    console.log('Order ID from metadata:', body.object.metadata.order_id);

    console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑:', order);

    if (!order) {
      return NextResponse.json({ error: 'Order not found' }, { status: 404 });
    }

    const isSucceeded = body?.object?.status === 'succeeded';

    await prisma.order.update({
      where: {
        id: order.id,
      },
      data: {
        status: isSucceeded ? OrderStatus.SUCCEEDED : OrderStatus.CANCELLED,
      },
    });

    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞');

    const items = JSON.parse(order?.items as string) as CartItemDTO[];
    
    console.log('–†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', items);

    

    if (isSucceeded) {
      try {
        // await sendEmail(
        //   order.email,
        //   `Next Pizza | –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω!`,
        //   OrderSuccessTemplate({
        //     orderId: order.id, 
        //     items,
        //   //  totalAmount: useCart.totalAmount,
        //   //  totalPrice: order.totalAmount,
        //   //  vatPrice: order.vatAmount,
        //   //  deliveryPrice: order.deliveryAmount,
        //    // paymentUrl: "",
        //  }
        // );
              //  );
        // –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è totalPrice, vatPrice –∏ deliveryPrice
      const vatPrice = order.vatAmount; // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑ —Ü–µ–Ω—Ç–æ–≤ –≤ —Ä—É–±–ª–∏
      const deliveryPrice = order.deliveryAmount; // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑ —Ü–µ–Ω—Ç–æ–≤ –≤ —Ä—É–±–ª–∏
      const totalPrice = order.totalPriceAmount; // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑ —Ü–µ–Ω—Ç–æ–≤ –≤ —Ä—É–±–ª–∏
      const totalAmount = totalPrice - vatPrice - deliveryPrice; // –ò—Ç–æ–≥–æ —Å—É–º–º–∞ –∫–æ—Ä–∑–∏–Ω—ã

      const html = `
      <h1>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ</h1>

      <p>üöÄ–í–∞—à –∑–∞–∫–∞–∑ #${order?.id} –æ–ø–ª–∞—á–µ–Ω. –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:</p>
        
      <hr />
    
      <ul>
      ${items
        .map((item) => {
          return `<li>${item.productItem.product.name} | (${item.productItem.price} ‚ÇΩ x ${item.quantity} —à—Ç.)</li>`;
        })
        .join('')}
      </ul> 
      <hr />
      <p>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã: ${totalAmount.toFixed(2)} ‚ÇΩ</p>
      <p>–ù–∞–ª–æ–≥–∏ (–ù–î–°): ${vatPrice.toFixed(2)} ‚ÇΩ</p>
      <p>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ${deliveryPrice.toFixed(2)} ‚ÇΩ</p>
      <p><strong>–û–±—â–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${totalPrice.toFixed(2)} ‚ÇΩ</strong></p>  

      <p>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –∏ –Ω–∞–¥–µ–µ–º—Å—è —É–≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!</p> 
      `;
  
      await sendEmail(
        order.email, 
        `Next Pizza | –ó–∞–∫–∞–∑ #${order?.id} –æ–ø–ª–∞—á–µ–Ω!`, 
        html,
      );


        console.log('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
      } catch (emailError) {
        console.error('Error sending email:', emailError);
      }
    }

    return NextResponse.json({ message: '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω' });

  } catch (error) {
    console.error('[checkout/callback] error', error);
    return NextResponse.json({ error: 'Server error' }, { status: 500 });
  }
}

////////////////////////////////////$Recycle.Bin
// export async function POST(req: NextRequest) {
//   console.log("POST /checkout route hit");
//   try {
//     console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å');

//       //* –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–ª–∞—Ç–µ–∂–∞
//       const body = (await req.json()) as PaymentCallbackData;
//       console.log('–†–∞–∑–æ–±—Ä–∞–Ω–Ω–æ–µ —Ç–µ–ª–æ:', body);

//       //* –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
//       const order = await prisma.order.findFirst({
//           where: {
//             id: Number(body.object.metadata.order_id),
//           },

//         });
//         console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑:', order);

//         //* –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω
//       if (!order) {
//           return NextResponse.json({ error: 'Order not found' }, { status: 404 });
//       }

//       //* –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –æ –ø–ª–∞—Ç–µ–∂–µ
//       const isSucceeded = body.object.status === 'succeeded';

//       //* –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
//       await prisma.order.update({
//           where: {
//           id: order.id,
//           },
//           data: {
//           status: isSucceeded ? OrderStatus.SUCCEEDED : OrderStatus.CANCELLED,
//           },
//       });
//       console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞');

//           //* –Ω–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã 
//       const items = JSON.parse(order?.items as string) as CartItemDTO[];
//       console.log('–†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', items);
      
//           //* –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞–∫–∞–∑–µ
//       if (isSucceeded) {
//           await sendEmail(
//               order.email, 
//               'Next Pizza | –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω!',
//               OrderSuccessTemplate({ orderId: order.id, items })
//           );
//       }
//       console.log('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
//   } catch (error) {
//       console.log('[checkout/callback] error', error);
//       return NextResponse.json({ error: 'Server error' }, { status: 500 });
//   }


// }


